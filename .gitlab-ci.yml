stages:
  - build
  - integrationtest
  - publish

services:
  - docker:dind

# For predefined environment variables see: https://docs.gitlab.com/ee/ci/variables/
variables:
  # Instruct Testcontainers to use the daemon of DinD.
  # See further: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  DOCKER_HOST: "tcp://docker:2375"
  # Improve performance with overlayfs.
  # See further: https://docs.docker.com/storage/storagedriver/overlayfs-driver/
  # See further: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  DOCKER_DRIVER: "overlay2"
  
  ADAPTER_DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/adapter-service
  UI_DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/ui-service



# ----------------- ADAPTER SERVICE --------------------

# BUILD
build-adapter:
  stage: build
  image: docker:stable
  before_script:
    - cd adapter
  script:
    - docker build -t ${ADAPTER_DOCKER_IMAGE_NAME} .
    - mkdir image # Store built image for following CI steps
    - docker save ${ADAPTER_DOCKER_IMAGE_NAME} > image/adapter.tar
  artifacts:
    expire_in: 1 day
    paths:
      - ./adapter/image/adapter.tar

# INEGRATION-TEST
integrationtest-adapter:
  stage: integrationtest
  image: mykiwi/docker
  dependencies:
    - build-adapter
  before_script:
    - cd adapter/deploy/compose
  script:
    - docker load -i ./../../image/adapter.tar
    - docker-compose build adapter-service-it
    - docker-compose up -d adapter-service
    - docker-compose up --exit-code-from adapter-service-it adapter-service-it
  after_script:
    - cd adapter/deploy/compose
    - docker-compose down

# PUBLISH
publish-docker-adapter:
  stage: publish
  image: docker:stable 
  dependencies:
    - build-adapter
  when: manual
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - cd adapter
  script:
    - docker load -i image/adapter.tar
    - export ADAPTER_VERSION=$(cat build.gradle | grep "version =" | awk '{print $3}' | sed "s/[']//g")
    # Tag as version and push
    - docker tag ${ADAPTER_DOCKER_IMAGE_NAME} ${ADAPTER_DOCKER_IMAGE_NAME}:${ADAPTER_VERSION}
    - docker tag ${ADAPTER_DOCKER_IMAGE_NAME} ${ADAPTER_DOCKER_IMAGE_NAME}:latest
    - docker push ${ADAPTER_DOCKER_IMAGE_NAME}:${ADAPTER_VERSION}
    - docker push ${ADAPTER_DOCKER_IMAGE_NAME}:latest


# ----------------- UI SERVICE --------------------

# BUILD
build-ui:
  stage: build
  image: docker:stable
  before_script:
    - cd ui
  script:
    - "docker build -t ${UI_DOCKER_IMAGE_NAME} ."
    - mkdir image # Store built image for following CI steps
    - docker save ${UI_DOCKER_IMAGE_NAME} > image/ui.tar
  artifacts:
    paths:
      - ./ui/image

# PUBLISH
publish-docker-ui:
  stage: publish
  image: docker:stable 
  dependencies:
    - build-ui
  when: manual
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - cd ui
  script:
    - docker load -i ./image/ui.tar
    - export UI_VERSION=$(cat package.json | grep "version" | awk '{print $2}' | sed 's/[,"]//g')
    # Tag as version and push
    - docker tag ${UI_DOCKER_IMAGE_NAME} ${UI_DOCKER_IMAGE_NAME}:${UI_VERSION}
    - docker tag ${UI_DOCKER_IMAGE_NAME} ${UI_DOCKER_IMAGE_NAME}:latest
    - docker push ${UI_DOCKER_IMAGE_NAME}:${UI_VERSION}
    - docker push ${UI_DOCKER_IMAGE_NAME}:latest