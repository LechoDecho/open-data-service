stages:
  - build
  - test
  - docker
  - integrationTest
  - publish
  - deploy

services:
  - docker:dind

# For predefined environment variables see: https://docs.gitlab.com/ee/ci/variables/
variables:
  # Instruct Testcontainers to use the daemon of DinD.
  # See further: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  DOCKER_HOST: "tcp://docker:2375"
  # Improve performance with overlayfs.
  # See further: https://docs.docker.com/storage/storagedriver/overlayfs-driver/
  # See further: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  DOCKER_DRIVER: "overlay2"

  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"

  ADAPTER_DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/adapter-service
  UI_DOCKER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/ui-service


# ----------------- ADAPTER SERVICE --------------------

# BUILD
build-adapter:
  stage: build
  image: adoptopenjdk/openjdk12-openj9:alpine-slim
  before_script:
    - cd adapter
  script:
    - ./gradlew assemble
    # save version for later CI steps
    - echo $(./gradlew properties -q | grep 'version:' | awk '{print $2}') > ./build/version.txt
  artifacts:
    paths:
      - ./adapter/build

# TEST
test-adapter:
  stage: test
  image: adoptopenjdk/openjdk12-openj9:alpine-slim
  dependencies:
    - build-adapter
  before_script:
    - cd adapter
  script:
    - ./gradlew test
  artifacts:
    reports:
      junit: ./adapter/build/test-results/test/*.xml

# DOCKER
docker-adapter:
  stage: docker
  image: docker:stable 
  dependencies:
    - build-adapter
  before_script:
    - cd adapter
  script:
    - "docker build -t ${ADAPTER_DOCKER_IMAGE_NAME} ."
    - mkdir image # Store built image for following CI steps
    - docker save ${ADAPTER_DOCKER_IMAGE_NAME} > image/adapter.tar
  artifacts:
    expire_in: 1 day
    paths:
      - ./adapter/image

# PUBLISH
publish-docker-adapter:
  stage: publish
  image: docker:stable 
  dependencies:
      - docker-adapter
      - build-adapter
  when: manual
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - cd adapter
  script:
    - docker load -i ./image/adapter.tar
    # Tag as version and push
    - export ADAPTER_VERSION=$(tr '[:upper:]' '[:lower:]' < ./build/version.txt) # from build-adapter
    - docker tag ${ADAPTER_DOCKER_IMAGE_NAME} ${ADAPTER_DOCKER_IMAGE_NAME}:${ADAPTER_VERSION}
    - docker tag ${ADAPTER_DOCKER_IMAGE_NAME} ${ADAPTER_DOCKER_IMAGE_NAME}:latest
    - docker push ${ADAPTER_DOCKER_IMAGE_NAME}:${ADAPTER_VERSION}
    - docker push ${ADAPTER_DOCKER_IMAGE_NAME}:latest


# ----------------- UI SERVICE --------------------

# BUILD
build-ui:
  stage: build
  image: docker:stable
  before_script:
    - cd ui
  script:
    - "docker build -t ${UI_DOCKER_IMAGE_NAME} ."
    - mkdir image # Store built image for following CI steps
    - docker save ${UI_DOCKER_IMAGE_NAME} > image/ui.tar
    - mkdir build
    - echo $(cat package.json | grep "version" | awk '{print $2}' | sed 's/[,"]//g') > ./build/version.txt
  artifacts:
    paths:
      - ./ui/image
      - ./ui/build

# TEST
test-ui:
  stage: test
  image: node:lts-alpine
  before_script:
    - cd ui
  script:
    - npm install
    - npm run lint
    - npm run test:unit
  artifacts:
    reports:
      junit: ./ui/build/test-results/*.html


# PUBLISH
publish-docker-ui:
  stage: publish
  image: docker:stable 
  dependencies:
      - build-ui
  when: manual
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - cd ui
  script:
    - docker load -i ./image/ui.tar
    # Tag as version and push
    - export UI_VERSION=$(tr '[:upper:]' '[:lower:]' < ./build/version.txt) # from build-adapter
    - docker tag ${UI_DOCKER_IMAGE_NAME} ${UI_DOCKER_IMAGE_NAME}:${UI_VERSION}
    - docker tag ${UI_DOCKER_IMAGE_NAME} ${UI_DOCKER_IMAGE_NAME}:latest
    - docker push ${UI_DOCKER_IMAGE_NAME}:${UI_VERSION}
    - docker push ${UI_DOCKER_IMAGE_NAME}:latest

