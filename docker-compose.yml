# Service configurations for all microservices
# has to be specified by environment files

version: '3.7'


volumes:
  auth_postgres_data:
    driver: local

services:

  # ----------------- UI SERVICE (/ui) --------------------
  ui-service:
    image: registry.gitlab.com/profoss/open-data-service/ods-main/ui-service
    build:
      context: ./ui/
      args:
        UI_BASE_URL: /ui
        AUTH_SERVICE_URL: /auth
        CORE_SERVICE_URL: /core
        STORAGE_SERVICE_URL: /storage
        TRANSFORMATION_SERVICE_URL: /transformation
    labels: # traefic reverse-proxy config
      - "traefik.backend=ui-service"
      - "traefik.frontend.rule=PathPrefixStrip:/ui"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.port=8080"

  # ----------------- AUTH SERVICE (/auth) --------------------
  auth-service-db:
    image: postgres
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    labels: # traefic reverse-proxy config
      - "traefik.enable=false"

  auth-service:
    image: registry.gitlab.com/profoss/open-data-service/ods-main/auth-service
    build:
      context: ./auth/
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: auth-service-db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      KEYCLOAK_LOGLEVEL: INFO
    labels: # traefic reverse-proxy config
      - "traefik.backend=auth-service"
      - "traefik.frontend.rule=PathPrefix:/auth"
      - "traefik.frontend.passHostHeader=true"

  # ----------------- ADAPTER SERVICE (/adapter) --------------------
  adapter-service:
    image: registry.gitlab.com/profoss/open-data-service/ods-main/adapter-service
    build:
      context: ./adapter/
    labels: # traefic reverse-proxy config
      - "traefik.backend=adapter-service"
      - "traefik.frontend.rule=PathPrefixStrip:/adapter"
      - "traefik.frontend.passHostHeader=true"

  # ----------------- SCHEDULER SERVICE (/scheduler) --------------------
  scheduler-service:
    image: registry.gitlab.com/profoss/open-data-service/ods-main/scheduler-service
    build:
      context: ./scheduler/
    environment:
      CONFIG_SERVICE_URL: http://core-service:8080
      ADAPTER_SERVICE_URL: http://adapter-service:8080
      TRANSFORMATION_SERVICE_URL: http://transformation-service:8080
      STORAGE_SERVICE_URL: http://storage-service:3000
      INITIAL_CONNECTION_RETRIES: 20
      INITIAL_CONNECTION_RETRY_BACKOFF: 5000
    labels: # traefic reverse-proxy config
      - "traefik.backend=scheduler-service"
      - "traefik.frontend.rule=PathPrefixStrip:/scheduler"
      - "traefik.frontend.passHostHeader=true"

  # ----------------- STORAGE SERVICE (/scheduler) --------------------
  storage-service: # Wraps postgres database with API
    image: registry.gitlab.com/profoss/open-data-service/ods-main/storage-service-postgrest
    build: ./storage/postgrest/
    environment:
      DATABASE_HOST: storage-service-db
      DATABASE_PORT: 5432
      DATABASE_NAME: ods
      DATABASE_USER: postgrest
      DATABASE_PW: postgres-wrapper-pw
    depends_on:
      - storage-service-db
      - storage-service-db-liquibase # TODO: make sure the migration runs through before reading db structure
    labels: # traefic reverse-proxy config
      - "traefik.backend=storage-service"
      - "traefik.frontend.rule=PathPrefixStrip:/storage"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.port=3000"

  storage-service-db:
    image: postgres:12-alpine
    environment:
      POSTGRES_DB: ods
      POSTGRES_USER: ods_admin
      POSTGRES_PASSWORD: ods_pw
  # Uncomment this if you want to persist the data.
  # volumes:
  #   - "./pgdata:/var/lib/postgresql/data"
    labels: # traefic reverse-proxy config
      - "traefik.enable=false"

  storage-service-db-ui: # management UI for Postgres
    image: adminer
    labels: # traefic reverse-proxy config
      - "traefik.enable=false"

  storage-service-db-liquibase: # perform database migration on start up
    image: registry.gitlab.com/profoss/open-data-service/ods-main/storage-service-liquibase
    build: ./storage/liquibase/ # TODO: Sql Injection is currently
    environment:
      DATABASE_HOST: storage-service-db
      DATABASE_PORT: 5432
      DATABASE_NAME: ods
      DATABASE_USER: ods_admin
      DATABASE_PW: ods_pw
    depends_on:
      - storage-service-db
    labels: # traefic reverse-proxy config
      - "traefik.enable=false"

  storage-service-swagger: # API documentation for storage service
    image: swaggerapi/swagger-ui
    environment:
      API_URL: http://localhost:9400/
    labels: # traefic reverse-proxy config
      - "traefik.enable=false"

  # ----------------- TRANSFORMATION SERVICE (/transformation) --------------------
  transformation-service:
    image: registry.gitlab.com/profoss/open-data-service/ods-main/transformation-service
    build:
      context: ./transformation/
    environment:
      AUTH_ENABLED: 'false' #TODO: turn to true as soon as it works!
    labels: # traefic reverse-proxy config
      - "traefik.backend=transformation-service"
      - "traefik.frontend.rule=PathPrefixStrip:/transformation"
      - "traefik.frontend.passHostHeader=true"

  # ----------------- CORE SERVICE (/core) --------------------
  core-service:
    image: registry.gitlab.com/profoss/open-data-service/ods-main/core-service
    build:
      context: ./core/
    environment:
      - DB_URL=jdbc:postgresql://core-service-db:5432/coreservice
    depends_on:
      - core-service-db
    labels: # traefic reverse-proxy config
      - "traefik.backend=core-service"
      - "traefik.frontend.rule=PathPrefixStrip:/core"
      - "traefik.frontend.passHostHeader=true"

  core-service-db:
    image: postgres
    environment:
      - POSTGRES_USER=coreservice
      - POSTGRES_PASSWORD=admin
    labels: # traefic reverse-proxy config
      - "traefik.enable=false"

# -------------------- EDGE SERVER (PORT 9000) -----------------------------
  edge-server:
    image: traefik:v1.7-alpine # The official Traefik docker image
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "9000:80"     # The HTTP port
      - "9001:8080"   # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    labels:
        - "traefik.enable=false"
